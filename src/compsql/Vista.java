/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package compsql;

import java.awt.Color;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringBufferInputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import org.antlr.runtime.ANTLRInputStream;
import org.antlr.runtime.CommonTokenStream;
import org.antlr.runtime.RecognitionException;

/**
 *
 * @author Usuario
 */
public class Vista extends javax.swing.JFrame {

    /**
     * Creates new form Vista
     */
    public Vista() {
        initComponents();
        taSalida.setVisible(false);
        taSalida.setEditable(false);
        this.setLocationRelativeTo(null);
        taAuxArch.setVisible(true);
        jDesktopPane1.setVisible(true);
    }

    private File rutaArchivo;
    SQLParser parser;
    String valor;
    int index;
    JPanel panel;
    JPanel panelActualiza;
    JFrame frame;
    JButton btnInsertar;
    JButton btnDocumentar;
    JTextField campo[] = null;
    String valores[] = null;
    JLabel etiqueta[] = null;
    String cadena = "";
    ConexionDB conexion = null;
    Connection connection = null;
    String valorReferencia;
    String referencia;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        taAuxiliarArchivos = new javax.swing.JTextArea();
        jToolBar1 = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        taSalida = new javax.swing.JTextArea();
        jToolBar2 = new javax.swing.JToolBar();
        btnGuardar = new javax.swing.JToggleButton();
        btnAbrir = new javax.swing.JButton();
        btnAyuda = new javax.swing.JButton();
        btnEjecutar = new javax.swing.JButton();
        btnInserta = new javax.swing.JButton();
        btnConsultar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        btnGenerar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        taEntrada = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jDesktopPane1 = new javax.swing.JDesktopPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        taAuxArch = new javax.swing.JTextArea();

        taAuxiliarArchivos.setColumns(20);
        taAuxiliarArchivos.setRows(5);
        jScrollPane3.setViewportView(taAuxiliarArchivos);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(" MySQL Kids  -  Compilador de SQL");
        setBackground(new java.awt.Color(153, 153, 153));

        jToolBar1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 102, 102)), "Consola", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12), new java.awt.Color(0, 102, 102))); // NOI18N
        jToolBar1.setRollover(true);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/database.png"))); // NOI18N
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton1);

        taSalida.setBackground(new java.awt.Color(204, 255, 204));
        taSalida.setColumns(20);
        taSalida.setFont(new java.awt.Font("Monospaced", 1, 13)); // NOI18N
        taSalida.setForeground(new java.awt.Color(0, 153, 51));
        taSalida.setRows(5);
        jScrollPane1.setViewportView(taSalida);

        jToolBar1.add(jScrollPane1);

        jToolBar2.setBackground(new java.awt.Color(204, 204, 204));
        jToolBar2.setRollover(true);

        btnGuardar.setBackground(new java.awt.Color(204, 204, 204));
        btnGuardar.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Sin-t√≠tulo-1.png"))); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.setFocusable(false);
        btnGuardar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnGuardar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnGuardar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnGuardarMouseClicked(evt);
            }
        });
        jToolBar2.add(btnGuardar);

        btnAbrir.setBackground(new java.awt.Color(204, 204, 204));
        btnAbrir.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/folder.png"))); // NOI18N
        btnAbrir.setText("Abrir");
        btnAbrir.setFocusable(false);
        btnAbrir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAbrir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAbrir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAbrirMouseClicked(evt);
            }
        });
        jToolBar2.add(btnAbrir);

        btnAyuda.setBackground(new java.awt.Color(204, 204, 204));
        btnAyuda.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnAyuda.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/chat.png"))); // NOI18N
        btnAyuda.setText("Ayuda");
        btnAyuda.setFocusable(false);
        btnAyuda.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAyuda.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAyuda.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAyudaMouseClicked(evt);
            }
        });
        jToolBar2.add(btnAyuda);

        btnEjecutar.setBackground(new java.awt.Color(204, 204, 204));
        btnEjecutar.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnEjecutar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/ejecutar.png"))); // NOI18N
        btnEjecutar.setText("Ejecutar");
        btnEjecutar.setFocusable(false);
        btnEjecutar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnEjecutar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnEjecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEjecutarActionPerformed(evt);
            }
        });
        jToolBar2.add(btnEjecutar);

        btnInserta.setBackground(new java.awt.Color(204, 204, 204));
        btnInserta.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnInserta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/generar.png"))); // NOI18N
        btnInserta.setText("Insertar");
        btnInserta.setFocusable(false);
        btnInserta.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnInserta.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnInserta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertaActionPerformed(evt);
            }
        });
        jToolBar2.add(btnInserta);

        btnConsultar.setBackground(new java.awt.Color(204, 204, 204));
        btnConsultar.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnConsultar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/query.png"))); // NOI18N
        btnConsultar.setText("Consultar");
        btnConsultar.setFocusable(false);
        btnConsultar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnConsultar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultarActionPerformed(evt);
            }
        });
        jToolBar2.add(btnConsultar);

        btnActualizar.setBackground(new java.awt.Color(204, 204, 204));
        btnActualizar.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnActualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/descarga.png"))); // NOI18N
        btnActualizar.setText("Actualizar");
        btnActualizar.setFocusable(false);
        btnActualizar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnActualizar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });
        jToolBar2.add(btnActualizar);

        btnGenerar.setBackground(new java.awt.Color(204, 204, 204));
        btnGenerar.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnGenerar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/generate.png"))); // NOI18N
        btnGenerar.setText("Generar C√≥digo");
        btnGenerar.setFocusable(false);
        btnGenerar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnGenerar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnGenerar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnGenerarMouseClicked(evt);
            }
        });
        jToolBar2.add(btnGenerar);

        taEntrada.setColumns(20);
        taEntrada.setFont(new java.awt.Font("Consolas", 0, 23)); // NOI18N
        taEntrada.setForeground(new java.awt.Color(0, 0, 102));
        taEntrada.setRows(5);
        jScrollPane2.setViewportView(taEntrada);

        jLabel1.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Generaci√≥n de c√≥digo SQL", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        taAuxArch.setBackground(new java.awt.Color(233, 222, 255));
        taAuxArch.setColumns(20);
        taAuxArch.setFont(new java.awt.Font("Californian FB", 1, 20)); // NOI18N
        taAuxArch.setForeground(new java.awt.Color(0, 51, 102));
        taAuxArch.setRows(5);
        jScrollPane4.setViewportView(taAuxArch);

        jDesktopPane1.setLayer(jScrollPane4, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 440, Short.MAX_VALUE)
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jDesktopPane1)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jDesktopPane1)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addContainerGap(1359, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 816, Short.MAX_VALUE)
                            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        if (taSalida.isVisible() == false) {
            taSalida.setVisible(true);
        } else {
            taSalida.setVisible(false);

        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnEjecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEjecutarActionPerformed

        String s = "";
        s = taEntrada.getText();
        StringBufferInputStream sbis = new StringBufferInputStream(s);

        // Create a CharStream that reads from standard input 
        ANTLRInputStream input = null;
        try {
            input = new ANTLRInputStream(sbis);
        } catch (IOException ex) {
            Logger.getLogger(Vista.class.getName()).log(Level.SEVERE, null, ex);
        }

        // create a lexer that feeeds off of input CharStream
        SQLLexer lexer = new SQLLexer(input);

        // create a buffer of tokens pulled from lexer
        CommonTokenStream tokens = new CommonTokenStream(lexer);

        //create a parser that feeds off the tokens buffer
        parser = new SQLParser(tokens);

        parser.setSalida(taSalida);
        parser.setArchivo(taAuxArch);

        try {
            // begin parsing at rule r
            parser.inicio();
        } catch (RecognitionException ex) {
            Logger.getLogger(Vista.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnEjecutarActionPerformed

    private void btnGuardarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnGuardarMouseClicked

        String texto = (String) taAuxArch.getText();
        if (texto.matches("[[ ]*[\n]*[\t]]*")) {
            JOptionPane.showMessageDialog(null, "Error, el archivo est√° vac√≠o", "Advertencia", JOptionPane.WARNING_MESSAGE);
        } else {
            JFileChooser selector = new JFileChooser();
            FileNameExtensionFilter filtro = new FileNameExtensionFilter("Scripts de SQL", ".sql");
            selector.setFileFilter(filtro);
            int seleccion = selector.showSaveDialog(null);
            try {
                if (seleccion == JFileChooser.APPROVE_OPTION) {
                    rutaArchivo = selector.getSelectedFile();
                    String ruta = rutaArchivo.getAbsolutePath();
                    PrintWriter escritura = new PrintWriter(rutaArchivo);
                    escritura.print(texto);
                    escritura.close();
                    
                    

                    if (!(ruta.endsWith(".sql"))) {
                        File archivoTemporal = new File(ruta + ".sql");
                        rutaArchivo.renameTo(archivoTemporal);
                    }
                    JOptionPane.showMessageDialog(null, "El archivo se ha guardado correctamente", "Guardar", JOptionPane.INFORMATION_MESSAGE);
                }
            } catch (Exception ei) {
                JOptionPane.showMessageDialog(null, "Error al intentar guardar", "Guardar", JOptionPane.ERROR_MESSAGE);
            }
            jLabel1.setText("Se ha guardado el archivo en: " + String.valueOf(rutaArchivo));
        }
    }//GEN-LAST:event_btnGuardarMouseClicked

    private void btnAbrirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAbrirMouseClicked
        // TODO add your handling code here:
        JFileChooser selector = new JFileChooser();
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Scripts SQL", "sql");
        selector.setFileFilter(filtro);
        int opcSelected = selector.showOpenDialog(this);
        int opcAbrir = JFileChooser.APPROVE_OPTION;
        if (opcSelected == opcAbrir) {
            rutaArchivo = selector.getSelectedFile();
            taAuxArch.setText(null);
            FileReader leerArchivo;
            try {
                leerArchivo = new FileReader(rutaArchivo);
                BufferedReader leiLinea = new BufferedReader(leerArchivo);
                String linea;
                while ((linea = leiLinea.readLine()) != null) {
                    taAuxArch.append(linea + "\n");
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Error al leer el archivo");
                Logger.getLogger(Vista.class.getName()).log(Level.SEVERE, null, ex);
            }
            jLabel1.setText("" + String.valueOf(rutaArchivo));
        }
    }//GEN-LAST:event_btnAbrirMouseClicked

    private void btnAyudaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAyudaMouseClicked
        // TODO add your handling code here:
        try {
            File path = new File("C:\\Users\\OmarSebastian\\Documents\\7¬∞ Semestre\\Leng. Automatas II\\Manual de Uso de MySQL Kids.pdf");
            Desktop.getDesktop().open(path);
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnAyudaMouseClicked

    @SuppressWarnings("empty-statement")
    private void btnInsertaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertaActionPerformed
        // ---- Frame principal
        frame = new JFrame();
        frame.setTitle("Altas");
        JPanel p = new JPanel();
        frame.add(p);
        frame.setSize(600, 600);
        frame.setLocationRelativeTo(null);
        GridLayout grid = new GridLayout(2, 1);
        frame.setLayout(null);
        // frame.setLayout(grid);
        
        // ---- Combo
        final JComboBox combo = new JComboBox();
        combo.setBounds(50, 5, 100, 50);
        frame.add(combo);
        
        // ---- Panel
        panel = new JPanel();
        frame.add(panel);
        
        // ---- Ordenar el hash de Tablas
        List sortedKeys = new ArrayList(parser.hashTablas.keySet());
        Collections.sort(sortedKeys);
        System.out.println("" + parser.hashTablas);
        
        // ---- Iterador para agregar elementos al combo
        Iterator itr = parser.hashTablas.entrySet().iterator();
        btnInsertar = new JButton("Insertar");
        panel.add(btnInsertar);
        while (itr.hasNext()) {
            Map.Entry e = (Map.Entry) itr.next();
            combo.addItem(e.getValue());
        }

        combo.addItemListener(new java.awt.event.ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent ie) {
                if (ie.getSource() == combo) {
                    index = combo.getSelectedIndex(); //guardar el √≠ndice del item del combo seleccionado
                    panel.removeAll();                          //remover todo y actualizar
                    panel.updateUI();
                    int filas = (((parser.dataStructure.get(index).size()) + 1));
                    GridLayout gl = new GridLayout(filas, 2);
                    panel.setLayout(gl);
                    panel.setBackground(Color.gray);
                    pintar(index);        //llamada al m√©todo para que pinte en conformidad con el numero de atributos de una tabla
                    JLabel inserta = new JLabel("Inserci√≥n en la BD");
                    inserta.setForeground(Color.BLUE);
                    inserta.setHorizontalAlignment(JLabel.CENTER);
                    inserta.setFont(new Font("Arial", Font.BOLD, 20));
                    panel.add(inserta);
                    panel.add(btnInsertar);
                }
            }
        });

        btnInsertar.addActionListener(new java.awt.event.ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {           
                String nombreTabla = parser.hashTablas.get(index).toString();
                String[] insert = new String[parser.dataStructure.get(index).size()];

                for (int i = 0; i <= parser.dataStructure.get(index).size() - 1; i++) {
                    insert[i] = campo[i].getText();
                }

                conexion = new ConexionDB();

                try {
                    conexion.InsertDB(insert, nombreTabla);
                } catch (ClassNotFoundException | InstantiationException | IllegalAccessException ex) {
                    Logger.getLogger(Vista.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

        frame.setVisible(true);
    }//GEN-LAST:event_btnInsertaActionPerformed
      
    public void pintar(int index) {
        String cadena = "";
        campo = new JTextField[parser.dataStructure.get(index).size()];
        etiqueta = new JLabel[parser.dataStructure.get(index).size()];
        for (int i = 0; i <= parser.dataStructure.get(index).size() - 1; i++) {
            int pos = 150;
            etiqueta[i] = new JLabel();
            etiqueta[i].setText(parser.dataStructure.get(index).get(i));
            etiqueta[i].setFont(new Font("Arial", Font.ITALIC, 20));
            etiqueta[i].setHorizontalAlignment(JLabel.CENTER);
            cadena += parser.dataStructure.get(index).get(i) + ":   ";
            panel.add(etiqueta[i]);
            campo[i] = new JTextField();
            campo[i].setFont(new Font("Arial", Font.PLAIN, 20));
            campo[i].setHorizontalAlignment(JLabel.CENTER);
            campo[i].setBounds(50, pos, 100, 100);
            campo[i].setBounds(200, pos, 100, 100);
            cadena += campo[i].getText() + "\n";
            panel.setBounds(50, 100, 400, 400);
            panel.add(campo[i]);
            pos += 100;
        }
    }
    
    private void conectarBD() {
        try {
            Class.forName("com.mysql.jdbc.Driver").newInstance();
            String url = "jdbc:mysql://localhost:3306/Automatas";
            connection = DriverManager.getConnection(url, "root", "escuela");
            //ruta de acceso, usuario, contrase√±a
        } catch (SQLException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException ex) {
            Logger.getLogger(Vista.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (connection != null) {
            System.out.println("Conexion exitosa");
        }
    }

    private void btnConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultarActionPerformed
        // Frame de Consulta
        JFrame frameConsulta = new JFrame();
        frameConsulta.setTitle("Consultas");
        frameConsulta.setSize(700, 500);
        frameConsulta.setVisible(true);

        //Combo
        frameConsulta.setLayout(null);
        final JComboBox comboConsulta = new JComboBox();
        comboConsulta.setBounds(50, 10, 180, 40);
        frameConsulta.add(comboConsulta);

        // ---- Iterador para agregar elementos al combo
        Iterator itr = parser.hashTablas.entrySet().iterator();
        while (itr.hasNext()) {
            Map.Entry e = (Map.Entry) itr.next();
            comboConsulta.addItem(e.getValue());
        }
        //Tabla
        final JTable table = new JTable();
        JScrollPane scrollpane = new JScrollPane(table);
        table.setBounds(50, 80, 570, 300);
        frameConsulta.add(table);

        //Boton
        JButton consultar = new JButton();
        consultar.setBounds(50, 400, 190, 30);
        consultar.setText("Consultar");
        frameConsulta.add(consultar);

        consultar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
            }
        });

        comboConsulta.addItemListener(new java.awt.event.ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent ie) {
                if (ie.getSource() == comboConsulta) {
                    index = comboConsulta.getSelectedIndex(); //guardar el √≠ndice del item del combo seleccionado
                    valor = comboConsulta.getSelectedItem().toString();

                    conectarBD();
                    String query = "SELECT * FROM " + valor;
                    PreparedStatement st;
                    ResultSet rs;

                    try {
                        st = connection.prepareStatement(query);
                        rs = st.executeQuery();

                        DefaultTableModel dtm = new DefaultTableModel();
                        Object datos[] = new Object[parser.dataStructure.get(index).size()];

                        //agregar columnas
                        for (int i = 0; i < parser.dataStructure.get(index).size(); i++) {
                            dtm.addColumn(parser.dataStructure.get(index).get(i));
                        }
                        while (rs.next()) {
                            for (int i = 0; i < parser.dataStructure.get(index).size(); i++) {
                                datos[i] = rs.getObject(i + 1);
                            }
                            dtm.addRow(datos);
                        }

                        table.setModel(dtm);

                    } catch (SQLException ex) {
                        Logger.getLogger(Vista.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        });
    }//GEN-LAST:event_btnConsultarActionPerformed

    
    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        // Frame de Consulta
        final JFrame frameActualiza = new JFrame();
        frameActualiza.setTitle("Actualizaciones");
        frameActualiza.setSize(700, 700);
        frameActualiza.setVisible(true);

        //Combo
        frameActualiza.setLayout(null);
        final JComboBox comboActualiza = new JComboBox();
        comboActualiza.setBounds(50, 10, 180, 40);
        frameActualiza.add(comboActualiza);

        // ---- Iterador para agregar elementos al combo
        Iterator itr = parser.hashTablas.entrySet().iterator();
        while (itr.hasNext()) {
            Map.Entry e = (Map.Entry) itr.next();
            comboActualiza.addItem(e.getValue());
        }
        //Tabla
        final JTable tabla = new JTable();
        JScrollPane scrollpane = new JScrollPane(tabla);
        tabla.setBounds(50, 70, 570, 200);
        frameActualiza.add(tabla);
        
        //panel
        panelActualiza=new JPanel();
        panelActualiza.setBounds(50, 300, 570, 300);
        panelActualiza.setBackground(Color.gray);
        frameActualiza.add(panelActualiza);

        //Boton
        JButton actualizar = new JButton();
        actualizar.setBounds(50, 615, 220, 30);
        actualizar.setText("Actualizar");
        frameActualiza.add(actualizar);

        actualizar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                String nombreTabla = parser.hashTablas.get(index).toString();
                String[] campoupd = new String[parser.dataStructure.get(index).size()];
                String[] insertupd = new String[parser.dataStructure.get(index).size()];
                
                //for (int i = 0; i < parser.dataStructure.get(index).size(); i++) {
                    //lores[i]=etiqueta[i].toString();
                    //System.out.println(""+valores[i]);
                    
              for (int j = 0; j <= parser.dataStructure.get(index).size() - 1; j++) {
                  campoupd[j] = etiqueta[j].getText();
                  insertupd[j] = campo[j].getText();
              }
                  conexion = new ConexionDB();
                try {
                    conexion.ActualizarDB(referencia, campoupd, insertupd, nombreTabla);
                } catch (ClassNotFoundException | InstantiationException | IllegalAccessException ex) {
                    Logger.getLogger(Vista.class.getName()).log(Level.SEVERE, null, ex);
                }    
                //}
                
                    conectarBD();
                    String query = "SELECT * FROM " + valor;
                    PreparedStatement st;
                    ResultSet rs;

                    try {
                        st = connection.prepareStatement(query);
                        rs = st.executeQuery();

                        DefaultTableModel dtm = new DefaultTableModel();
                        Object datos[] = new Object[parser.dataStructure.get(index).size()];

                        //agregar columnas
                        for (int i = 0; i < parser.dataStructure.get(index).size(); i++) {
                            dtm.addColumn(parser.dataStructure.get(index).get(i));
                        }
                        //agregar registros
                        while (rs.next()) {
                            for (int i = 0; i < parser.dataStructure.get(index).size(); i++) {
                                datos[i] = rs.getObject(i + 1);
                            }
                            dtm.addRow(datos);
                        }

                        tabla.setModel(dtm);

                    } catch (SQLException ex) {
                        Logger.getLogger(Vista.class.getName()).log(Level.SEVERE, null, ex);
                    }             
            }
        });

        // --- Evento del combo que al dar clic consulta y muestra los resutlados en el jTable
        comboActualiza.addItemListener(new java.awt.event.ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent ie) {
                if (ie.getSource() == comboActualiza) {
                    index = comboActualiza.getSelectedIndex(); //guardar el √≠ndice del item del combo seleccionado
                    valor = comboActualiza.getSelectedItem().toString();

                    conectarBD();
                    String query = "SELECT * FROM " + valor;
                    PreparedStatement st;
                    ResultSet rs;

                    try {
                        st = connection.prepareStatement(query);
                        rs = st.executeQuery();

                        DefaultTableModel dtm = new DefaultTableModel();
                        Object datos[] = new Object[parser.dataStructure.get(index).size()];

                        //agregar columnas
                        for (int i = 0; i < parser.dataStructure.get(index).size(); i++) {
                            dtm.addColumn(parser.dataStructure.get(index).get(i));
                        }
                        //agregar registros
                        while (rs.next()) {
                            for (int i = 0; i < parser.dataStructure.get(index).size(); i++) {
                                datos[i] = rs.getObject(i + 1);
                            }
                            dtm.addRow(datos);
                        }

                        tabla.setModel(dtm);

                    } catch (SQLException ex) {
                        Logger.getLogger(Vista.class.getName()).log(Level.SEVERE, null, ex);
                    }               
                    panelActualiza.removeAll();  //remover todo y actualizar
                    panelActualiza.updateUI();
                    int filas = (parser.dataStructure.get(index).size());
                    GridLayout gl = new GridLayout(filas, 2);
                    panelActualiza.setLayout(gl);
                    panelActualiza.setBackground(Color.gray);
                    dibujar(index);        //llamada al m√©todo para que pinte en conformidad con el numero de atributos de una tabla
                }
            }
        });

        // --- Evento que al pulsar sobre la tabla rellene los campos de texto del formulario        
        tabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                int filaSeleccionada = tabla.getSelectedRow();
                valorReferencia=(String) tabla.getValueAt(filaSeleccionada, 0);
                TableModel modelo=tabla.getModel();
                for (int i = 0; i < parser.dataStructure.get(index).size(); i++) {
                    campo[i].setText(modelo.getValueAt(filaSeleccionada, i).toString());
                }
                referencia = campo[0].getText();
            }
        });

    }//GEN-LAST:event_btnActualizarActionPerformed

    public void dibujar(int index) {
        String cadena = "";
        campo = new JTextField[parser.dataStructure.get(index).size()];
        etiqueta = new JLabel[parser.dataStructure.get(index).size()];
        for (int i = 0; i <= parser.dataStructure.get(index).size() - 1; i++) {
            int pos = 0;
            etiqueta[i] = new JLabel();
            etiqueta[i].setText(parser.dataStructure.get(index).get(i));
            etiqueta[i].setFont(new Font("Arial", Font.ITALIC, 20));
            etiqueta[i].setHorizontalAlignment(JLabel.CENTER);
            cadena += parser.dataStructure.get(index).get(i) + ":   ";
            panelActualiza.add(etiqueta[i]);
            campo[i] = new JTextField();
            campo[i].setFont(new Font("Arial", Font.PLAIN, 20));
            campo[i].setHorizontalAlignment(JLabel.CENTER);
            campo[i].setBounds(50, pos, 100, 100);
            campo[i].setBounds(200, pos, 100, 100);
            cadena += campo[i].getText() + "\n";
            panelActualiza.add(campo[i]);
            pos += 100;
        }
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Vista.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Vista.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Vista.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Vista.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Vista().setVisible(true);
            }
        });
    }

    int i ;
    private void btnGenerarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnGenerarMouseClicked
        String prog="";
        int numTablas = parser.hashTablas.size();
        int numAtributos;
        //for m√°s externo para iterar seg√∫n el n√∫mero de tablas
        
        for (i = 0; i < numTablas; i++) {
            numAtributos=parser.dataStructure.get(i).size();
            for (int j = 0; j < 3; j++) {
                // :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                // :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                // :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                // :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                
                if (j == 0) {
                       
                       System.out.println("Altas " + parser.hashTablas.get(i));
                       
                        prog+="import java.awt.Color;\n";
                        prog+="import java.awt.Font;\n";
                        prog+="import java.awt.GridLayout;\n";
                        prog+="import java.awt.event.ActionEvent;\n";
                        prog+="import java.awt.event.ActionListener;\n";
                        prog+="import java.io.BufferedReader;\n";
                        prog+="import java.io.BufferedWriter;\n";
                        prog+="import java.io.File;\n";
                        prog+="import java.io.FileReader;\n";
                        prog+="import java.io.FileWriter;\n";
                        prog+="import java.io.IOException;\n";
                        prog+="import java.io.PrintWriter;\n";
                        prog+="import java.sql.Connection;\n";
                        prog+="import java.sql.DriverManager;\n";
                        prog+="import java.sql.PreparedStatement;\n";
                        prog+="import java.sql.ResultSet;\n";
                        prog+="import java.sql.SQLException;\n";
                        prog+="import java.sql.Statement;\n";
                        prog+="import java.util.Collections;\n";
                        prog+="import java.util.Date;\n";
                        prog+="import javax.swing.JButton;\n";
                        prog+="import javax.swing.JFrame;\n";
                        prog+="import javax.swing.JLabel;\n";
                        prog+="import javax.swing.JOptionPane;\n";
                        prog+="import javax.swing.JPanel;\n";
                        prog+="import javax.swing.JScrollPane;\n";
                        prog+="import javax.swing.JTable;\n";
                        prog+="import javax.swing.JTextField;\n";
                       
                       prog+="public class Insercion"+parser.hashTablas.get(i)+"{\n";
                            prog+="public static void main(String[] args) {\n";
                           
                            
                            //frame
                            prog+="JFrame frame=new JFrame();\n";
                            prog+="frame.setTitle(\"Insercion en la tabla "+parser.hashTablas.get(i)+"\");\n";
                            prog+="frame.setSize(700, 500);\n";
                            prog+="frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n";                         
                            prog+="GridLayout gl = new GridLayout("+numAtributos+"+ 1, 2);\n";
                            prog+="frame.setLayout(gl);\n";

                            //etiquetas y campos
                            prog+="JLabel eti=new JLabel(\"D√© clic en el bot√≥n\");\n";
                            prog+="eti.setHorizontalAlignment(JLabel.CENTER);\n";
                            prog+="eti.setFont(new Font(\"Arial\", Font.BOLD, 20));\n";
                            prog+="eti.setForeground(Color.blue);\n";
                            
                            prog+="JButton btnAgregar = new JButton(\"Insertar\");\n";
                            prog+="btnAgregar.setHorizontalAlignment(JLabel.CENTER);\n";
                            prog+="btnAgregar.setFont(new Font(\"Arial\", Font.BOLD, 15));\n";
                            
                            prog+="final JTextField campo[] = new JTextField["+numAtributos+"];\n";
                            prog+="JLabel etiqueta[] = new JLabel["+numAtributos+"];\n";
                            
                            //prog+="for (int k = 0; k < "+numAtributos+"; k++) {\n";
                                for (int k = 0; k < numAtributos; k++) {
                                prog+="etiqueta["+k+"] = new JLabel();\n";
                                prog+="campo["+k+"] = new JTextField();\n";
                                
                                prog+="etiqueta["+k+"].setText(\""+parser.dataStructure.get(i).get(k)+"\");\n";
                                
                                prog+="etiqueta["+k+"].setHorizontalAlignment(JLabel.CENTER);\n";
                                prog+="etiqueta["+k+"].setFont(new Font(\"Arial\", Font.BOLD, 20));\n";
                                prog+="frame.add(etiqueta["+k+"]);\n";
                                
                                prog+="campo["+k+"].setHorizontalAlignment(JLabel.CENTER);\n";
                                prog+="campo["+k+"].setFont(new Font(\"Arial\", Font.ITALIC, 23));\n";
                                prog+="frame.add(campo["+k+"]);\n";
                                }
                            //prog+="}\n";

                            //boton
                            prog+="btnAgregar.addActionListener(new java.awt.event.ActionListener() {\n";
                                prog+="@Override\n";
                                prog+="public void actionPerformed(ActionEvent ae) {\n";
                                    prog+="Connection connection = null;\n";
                                    prog+="try {\n";
                                        prog+="Class.forName(\"com.mysql.jdbc.Driver\").newInstance();\n";
                                        prog+="String url = \"jdbc:mysql://localhost:3306/Automatas\";\n";
                                        prog+="connection = DriverManager.getConnection(url, \"root\", \"escuela\");\n";
                                        //ruta de acceso, usuario, contrase√±a
                                    prog+="} catch (SQLException e) {\n";
                                        prog+="e.printStackTrace();\n";
                                    prog+="} catch (ClassNotFoundException | InstantiationException | IllegalAccessException ex) {\n";
                                        prog+="ex.printStackTrace();\n";
                                     prog+="}\n";
                                     prog+="if (connection != null) {\n";
                                         prog+="System.out.println(\"Conexion exitosa\");\n";
                                     prog+="}\n";

                                     prog+="String[] insert = new String["+numAtributos+"];\n";
                                     prog+="for (int i = 0; i <="+numAtributos+"- 1; i++) {\n";
                                         prog+="insert[i] = campo[i].getText();\n";
                                     prog+="}\n";

                                     prog+="PreparedStatement preparedStatement = null;\n";
                                     prog+="String insertTableSQL = \"INSERT INTO "+ parser.hashTablas.get(i) +" VALUES(\";\n";

                                     prog+="try {\n";

                                         prog+="for (int i = 0; i < insert.length; i++) {\n";
                                             prog+="insertTableSQL += \"?,\";\n";
                                             prog+="if (i == insert.length - 1) {\n";
                                                 prog+="insertTableSQL = insertTableSQL.substring(0, insertTableSQL.length() - 1);\n";
                                             prog+="}\n";
                                         prog+="}\n";
                                         
                                         prog+="insertTableSQL += \")\";\n";
                                         prog+="preparedStatement = connection.prepareStatement(insertTableSQL);\n";
                                         prog+="System.out.println(insertTableSQL);\n";
                                         
                                         prog+="for (int i = 0; i < insert.length; i++) {\n";
                                             prog+="try {\n";
                                                 prog+="preparedStatement.setString(i + 1, insert[i]);\n";
                                             prog+="} catch (NumberFormatException e) {\n";
                                                 prog+="try {\n";
                                                     prog+="preparedStatement.setInt(i + 1, Integer.parseInt(insert[i]));\n";
                                                 prog+="} catch (NumberFormatException f) {\n";
                                                     prog+="try {\n";
                                                         prog+="preparedStatement.setFloat(i + 1, Float.parseFloat(insert[i]));\n";
                                                     prog+="} catch (NumberFormatException g) {\n";
                                                         prog+="Date d = new Date(insert[i]);\n";
                                                         prog+="preparedStatement.setDate(i + 1, (java.sql.Date) d);\n";
                                                     prog+="}\n";
                                                 prog+="}\n";
                                             prog+="}\n";
                                         prog+="}\n";

                                         prog+="preparedStatement.executeUpdate();\n";
                                         prog+="JOptionPane.showMessageDialog(null, \"Se ha insertado correctamente en la tabla "+parser.hashTablas.get(i)+"\");\n";

                                     prog+="} catch (SQLException e) {\n";
                                        prog+="System.out.println(e.getMessage());\n";
                                     prog+="}\n";
                                 prog+="}\n";
                             prog+="});\n";

                             prog+="frame.add(eti);\n";
                             prog+="frame.add(btnAgregar);\n";
                             prog+="frame.setVisible(true);\n";
                            
                      
                             
                            prog+="}\n";
                       prog+="}\n";
                       
                        try{
                            String ruta = "C:\\Users\\OmarSebastian\\Documents\\7¬∞ Semestre\\Leng. Automatas II\\Archivos Java Generados\\Insercion"+parser.hashTablas.get(i)+".java";
                            File archivo = new File(ruta);
                            BufferedWriter bw;
                        if(archivo.exists()) {
                            bw = new BufferedWriter(new FileWriter(archivo));
                            bw.write("El fichero de texto ya estaba creado.");
                        } else {
                            bw = new BufferedWriter(new FileWriter(archivo));
                            bw.write(prog);
                        }
                        bw.close();
                        }catch(IOException e){
                            e.printStackTrace();
                        }
                  //System.out.println(""+prog+"\n\n\n\n\n\n\n\n");
                  prog="";
                }
                
                // :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                // :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                // :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                // :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                if (j == 1) {
                        System.out.println("Consultas " + parser.hashTablas.get(i));
                        
                        prog+="import java.sql.Connection;\n";
                        prog+="import java.sql.DriverManager;\n";
                        prog+="import java.sql.PreparedStatement;\n";
                        prog+="import java.sql.ResultSet;\n";
                        prog+="import java.sql.SQLException;\n";
                        prog+="import javax.swing.JFrame;\n";
                        prog+="import javax.swing.JScrollPane;\n";
                        prog+="import javax.swing.JTable;\n";
                        prog+="import javax.swing.table.DefaultTableModel;\n";
                        prog+="import javax.swing.JButton;\n";
                        prog+="import java.awt.event.ActionEvent;\n";
                        prog+="import java.awt.event.ActionListener;\n";

                        prog+="public class Consulta"+parser.hashTablas.get(i)+"{\n";
                            prog+="public static void main(String[] args) {\n";

                            prog+="JFrame frameConsulta = new JFrame();\n";
                            prog+="frameConsulta.setTitle(\"Consultas de la tabla "+parser.hashTablas.get(i)+"\");\n";
                            prog+="frameConsulta.setSize(700, 500);\n";
                            prog+="frameConsulta.setLayout(null);\n";
                            prog+="frameConsulta.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n";

                            //Tabla
                            prog+="JTable table = new JTable();\n";
                            prog+="JScrollPane scrollpane = new JScrollPane(table);\n";
                            prog+="table.setBounds(50, 30, 570, 300);\n";
                            prog+="frameConsulta.add(table);\n";
                            //Bot√≥n
                            prog+="JButton consultar = new JButton();\n";
                            prog+="consultar.setBounds(50, 400, 190, 30);\n";
                            prog+="consultar.setText(\"Consultar\");\n";
                            prog+="frameConsulta.add(consultar);\n";

                            prog+="consultar.addActionListener(new ActionListener() {\n";
                            prog+="@Override\n";
                            prog+="public void actionPerformed(ActionEvent ae) {\n";            
                                    prog+="Connection connection = null;\n";
                                    prog+="";
                                        prog+="try {\n";
                                             prog+="Class.forName(\"com.mysql.jdbc.Driver\").newInstance();\n";
                                             prog+="String url = \"jdbc:mysql://localhost:3306/Automatas\";\n";
                                             prog+="connection = DriverManager.getConnection(url, \"root\", \"escuela\");\n";
                                             //ruta de acceso, usuario, contrase√±a
                                         prog+="} catch (SQLException e) {\n";
                                             prog+="e.printStackTrace();\n";
                                         prog+="} catch (ClassNotFoundException | InstantiationException | IllegalAccessException ex) {\n";
                                             prog+="ex.printStackTrace();\n";
                                         prog+="}\n";
                                         prog+="if (connection != null) {\n";
                                             prog+="System.out.println(\"Conexion exitosa\");\n";
                                         prog+="}\n";

                                            prog+="String query = \"SELECT * FROM "+parser.hashTablas.get(i)+"\";\n";
                                            prog+="PreparedStatement st;\n";
                                            prog+="ResultSet rs;\n";

                                            prog+="try {\n";
                                                prog+="st = connection.prepareStatement(query);\n";
                                                prog+="rs = st.executeQuery();\n";

                                                prog+="String consulta2 = \"SELECT COUNT(*) As numeroCampos FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema = 'Automatas' AND table_name = '"+parser.hashTablas.get(i)+"'\";\n";
                                                prog+="PreparedStatement pstm = connection.prepareStatement( consulta2 );\n";
                                                prog+="ResultSet res = pstm.executeQuery();\n";
                                                prog+="res.next();\n";
                                                prog+="int columnas = res.getInt(\"numeroCampos\");\n";

                                                prog+="DefaultTableModel dtm = new DefaultTableModel();\n";
                                                prog+="Object datos[] = new Object[columnas];\n";

                                                        //agregar columnas
                                                 prog+="for (int i = 0; i < columnas; i++) {\n";
                                                     prog+="dtm.addColumn(i);\n";
                                                 prog+="}\n";
                                                prog+="while (rs.next()) {\n";
                                                    prog+="for (int i = 0; i < columnas; i++) {\n";
                                                        prog+="datos[i] = rs.getObject(i + 1);\n";
                                                    prog+="}\n";
                                                    prog+="dtm.addRow(datos);\n";
                                                prog+="}\n";

                                                prog+="table.setModel(dtm);\n";

                                            prog+="} catch (SQLException ex) {\n";
                                                prog+="ex.printStackTrace();\n";
                                            prog+="}\n";                    
                              prog+="}\n";
                             prog+="});\n";
                             prog+="frameConsulta.setVisible(true);\n";

                            prog+="}\n";
                       prog+="}\n";
                       
                        try{
                            String ruta = "C:\\Users\\OmarSebastian\\Documents\\7¬∞ Semestre\\Leng. Automatas II\\Archivos Java Generados\\Consulta"+parser.hashTablas.get(i)+".java";
                            File archivo = new File(ruta);
                            BufferedWriter bw;
                        if(archivo.exists()) {
                            bw = new BufferedWriter(new FileWriter(archivo));
                            bw.write("El fichero de texto ya estaba creado.");
                        } else {
                            bw = new BufferedWriter(new FileWriter(archivo));
                            bw.write(prog);
                        }
                        bw.close();
                        }catch(IOException e){
                            e.printStackTrace();
                        }
                        //System.out.println(""+prog+"\n\n\n\n\n\n\n\n");
                        prog="";
                }
                
                // :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                // :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                // :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                // :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                if (j == 2) {
                        
                        System.out.println("Actualizaciones " + parser.hashTablas.get(i)+"\n");
                        
                        prog+="import java.awt.Color;\n";
                        prog+="import java.awt.Desktop;\n";
                        prog+="import java.awt.Dimension;\n";
                        prog+="import java.awt.Font;\n";
                        prog+="import java.awt.event.ActionEvent;\n";
                        prog+="import java.awt.event.ActionListener;\n";
                        prog+="import java.awt.event.MouseEvent;\n";
                        prog+="import java.awt.event.MouseListener;\n";
                        prog+="import java.io.BufferedReader;\n";
                        prog+="import java.io.BufferedWriter;\n";
                        prog+="import java.io.File;\n";
                        prog+="import java.io.FileReader;\n";
                        prog+="import java.io.FileWriter;\n";
                        prog+="import java.io.IOException;\n";
                        prog+="import java.io.PrintWriter;\n";
                        prog+="import java.io.StringBufferInputStream;\n";
                        prog+="import java.sql.Connection;\n";
                        prog+="import java.sql.DriverManager;\n";
                        prog+="import java.sql.PreparedStatement;\n";
                        prog+="import java.sql.ResultSet;\n";
                        prog+="import java.sql.SQLException;\n";
                        prog+="import java.sql.Statement;\n";
                        prog+="import java.util.ArrayList;\n";
                        prog+="import java.util.Collections;\n";
                        prog+="import java.util.Date;\n";
                        prog+="import java.util.logging.Level;\n";
                        prog+="import java.util.logging.Logger;\n";
                        prog+="import javax.swing.JButton;\n";
                        prog+="import javax.swing.JComboBox;\n";
                        prog+="import javax.swing.JFrame;\n";
                        prog+="import javax.swing.JLabel;\n";
                        prog+="import javax.swing.JOptionPane;\n";
                        prog+="import javax.swing.JPanel;\n";
                        prog+="import java.awt.GridLayout;\n";
                        prog+="import javax.swing.JScrollPane;\n";
                        prog+="import javax.swing.JTable;\n";
                        prog+="import javax.swing.JTextField;\n";
                        prog+="import javax.swing.table.AbstractTableModel;\n";
                        prog+="import javax.swing.table.DefaultTableModel;\n";
                        prog+="import javax.swing.table.TableModel;\n";
  
                        prog+="public class Actualizacion"+parser.hashTablas.get(i)+"{\n";    
                             prog+="static JTextField campo[] = null;\n";
                             prog+="static String valores[] = null;\n";
                             prog+="static JLabel etiqueta[] = null;\n";
                             prog+="static Connection connection = null;\n";
                             prog+="static String referencia;\n";
                            
                            prog+="public static void main(String[] args) {\n";                  
                            prog+="JPanel panelActualiza;\n";
                            prog+="String cadena = \"\";\n";
                            prog+="String valorReferencia;\n";
                            
                            
       
                            prog+="JFrame frameActualiza = new JFrame();\n";
                            prog+="frameActualiza.setTitle(\"Actualizaciones "+parser.hashTablas.get(i)+"\");\n";
                            prog+="frameActualiza.setSize(700, 700);\n";
                            prog+="frameActualiza.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n";
                            prog+="frameActualiza.setLayout(null);\n";

                            //Tabla
                            prog+="final JTable tabla = new JTable();\n";
                            prog+="tabla.setPreferredScrollableViewportSize(new Dimension(570, 245));\n";
                            prog+="tabla.setFillsViewportHeight(true);\n";
                            prog+="JScrollPane scrollpane = new JScrollPane(tabla);\n";
                            prog+="scrollpane.setVisible(true);\n";
                            prog+="frameActualiza.add(scrollpane);\n";
                            prog+="tabla.setBounds(50, 20, 570, 245);\n";
                            prog+="frameActualiza.add(tabla);\n";

                            //panel
                            prog+="panelActualiza = new JPanel();\n";
                            prog+="panelActualiza.setBounds(50, 295, 570, 300);\n";
                            prog+="panelActualiza.setBackground(Color.gray);\n";
                            prog+="frameActualiza.add(panelActualiza);\n";

                            //Boton
                            prog+="JButton actualizar = new JButton();\n";
                            prog+="actualizar.setBounds(50, 610, 287, 40);\n";
                            prog+="actualizar.setText(\"Actualizar\");\n";
                            prog+="frameActualiza.add(actualizar);\n";


                            //Conexi√≥n
                            prog+="try {\n";
                                prog+="Class.forName(\"com.mysql.jdbc.Driver\").newInstance();\n";
                                prog+="String url = \"jdbc:mysql://localhost:3306/Automatas\";\n";
                                prog+="connection = DriverManager.getConnection(url, \"root\", \"escuela\");\n";
                                //ruta de acceso, usuario, contrase√±a
                           prog+=" } catch (SQLException e) {\n";
                               prog+=" e.printStackTrace();\n";
                            prog+="} catch (ClassNotFoundException | InstantiationException | IllegalAccessException ex) {\n";
                                prog+="ex.printStackTrace();\n";
                             prog+="}\n";
                             prog+="if (connection != null) {\n";
                                 prog+="System.out.println(\"Conexion exitosa\");\n";
                             prog+="}\n";

                            //Consultas para llenar la tabla
                             prog+="String query = \"SELECT * FROM "+parser.hashTablas.get(i)+"\";\n";
                             prog+="PreparedStatement st;\n";
                             prog+="ResultSet rs;\n";
                             prog+="try {\n";
                                 prog+="st = connection.prepareStatement(query);\n";
                                 prog+="rs = st.executeQuery();\n";
                                 prog+="String consulta2 = \"SELECT COUNT(*) As numeroCampos FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema = 'Automatas' AND table_name = '"+parser.hashTablas.get(i)+"'\";\n";
                                 prog+="PreparedStatement pstm = connection.prepareStatement(consulta2);\n";
                                 prog+="ResultSet res = pstm.executeQuery();\n";
                                 prog+="res.next();\n";
                                 prog+="int columnas = res.getInt(\"numeroCampos\");\n";

                                 prog+="DefaultTableModel dtm = new DefaultTableModel();\n";
                                 prog+="Object datos[] = new Object[columnas];\n";
                                 prog+="for (int i = 0; i < columnas; i++) {\n";
                                     prog+="dtm.addColumn(i);\n";
                                 prog+="}\n";
                                 prog+="while (rs.next()) {\n";
                                     prog+="for (int i = 0; i < columnas; i++) {\n";
                                         prog+="datos[i] = rs.getObject(i + 1);\n";
                                     prog+="}\n";
                                     prog+="dtm.addRow(datos);\n";
                                 prog+="}\n";
                                 prog+="tabla.setModel(dtm);\n";
                             prog+="} catch (SQLException ex) {\n";
                                 prog+="ex.printStackTrace();\n";
                             prog+="}\n";

                            //Agregar etiquetas y campos en el panel
                             prog+="panelActualiza.removeAll();\n";
                             prog+="panelActualiza.updateUI();\n";
                             prog+="int filas = "+parser.dataStructure.get(index).size()+";\n";
                             prog+="GridLayout gl = new GridLayout(filas, 2);\n";
                             prog+="panelActualiza.setLayout(gl);\n";
                             prog+="panelActualiza.setBackground(Color.gray);\n";
                             prog+="campo = new JTextField["+parser.dataStructure.get(index).size()+"];\n";
                             prog+="etiqueta = new JLabel["+parser.dataStructure.get(index).size()+"];\n";
                             prog+="int pos = 0;\n"; 
                             for (int k = 0; k < numAtributos; k++) {
                                 prog+="etiqueta["+k+"] = new JLabel();\n";
                                 prog+="etiqueta["+k+"].setText(\""+parser.dataStructure.get(index).get(k)+"\");\n";
                                 prog+="etiqueta["+k+"].setFont(new Font(\"Arial\", Font.ITALIC, 20));\n";
                                 prog+="etiqueta["+k+"].setHorizontalAlignment(JLabel.CENTER);\n";
                                 prog+="panelActualiza.add(etiqueta["+k+"]);\n";
                                 prog+="campo["+k+"] = new JTextField();\n";
                                 prog+="campo["+k+"].setFont(new Font(\"Arial\", Font.PLAIN, 20));\n";
                                 prog+="campo["+k+"].setHorizontalAlignment(JLabel.CENTER);\n";
                                 prog+="campo["+k+"].setBounds(50, pos, 100, 100);\n";
                                 prog+="campo["+k+"].setBounds(200, pos, 100, 100);\n";
                                 prog+="panelActualiza.add(campo["+k+"]);\n";
                                 prog+="pos += 100;\n";
                              }

                             prog+="actualizar.addActionListener(new ActionListener() {\n";
                                 prog+="@Override\n";
                                 prog+="public void actionPerformed(ActionEvent ae) {\n";
                                     prog+="String nombreTabla = \""+parser.hashTablas.get(i).toString()+"\";\n";
                                     prog+="String[] campoupd = new String["+parser.dataStructure.get(i).size()+"];\n";
                                     prog+="String[] insertupd = new String["+parser.dataStructure.get(i).size()+"];\n";

                                     prog+="for (int j = 0; j <"+parser.dataStructure.get(i).size()+"; j++) {\n";
                                         prog+="campoupd[j] = etiqueta[j].getText();\n";
                                         prog+="insertupd[j] = campo[j].getText();\n";
                                     prog+="}\n";

                                     prog+="try {\n";
                                         prog+="Class.forName(\"com.mysql.jdbc.Driver\").newInstance();\n";
                                         prog+="String url = \"jdbc:mysql://localhost:3306/Automatas\";\n";
                                         prog+="connection = DriverManager.getConnection(url, \"root\", \"escuela\");\n";
                                        //ruta de acceso, usuario, contrase√±a
                                     prog+="} catch (SQLException e) {\n";
                                         prog+="e.printStackTrace();\n";
                                     prog+="} catch (ClassNotFoundException | InstantiationException | IllegalAccessException ex) {\n";
                                        prog+="ex.printStackTrace();\n";
                                     prog+="}\n";
                                     prog+="if (connection != null) {\n";
                                         prog+="System.out.println(\"Conexion exitosa\");\n";
                                     prog+="}\n";

                                     prog+="PreparedStatement preparedStatement = null;\n";
                                     prog+="String updateTableSQL = \"UPDATE "+parser.hashTablas.get(i) +" SET \";\n";

                                     prog+="try {\n";
                                         prog+="for (int i = 0; i < insertupd.length; i++) {\n";
                                             prog+="updateTableSQL += campoupd[i];\n";
                                             prog+="updateTableSQL += \"=\";\n";
                                             prog+="updateTableSQL += \"?,\";\n";
                                             prog+="if (i == insertupd.length - 1) {\n";
                                                 prog+="updateTableSQL = updateTableSQL.substring(0, updateTableSQL.length() - 1);\n";
                                             prog+="}\n";

                                         prog+="}\n";
                                         prog+="updateTableSQL += \" WHERE \" + campoupd[0] + \"=\" +\"'\"+referencia+\"'\";\n";
                                         prog+="preparedStatement = connection.prepareStatement(updateTableSQL);\n";
                                         prog+="System.out.println(updateTableSQL);\n";
                                         prog+="for (int i = 0; i < insertupd.length; i++) {\n";

                                             prog+="try {\n";

                                                 prog+="preparedStatement.setString(i + 1, insertupd[i]);\n";
                                             prog+="} catch (NumberFormatException e) {\n";

                                                 prog+="try {\n";
                                                     prog+="preparedStatement.setInt(i + 1, Integer.parseInt(insertupd[i]));\n";

                                                 prog+="} catch (NumberFormatException f) {\n";
                                                     prog+="try {\n";
                                                         prog+="preparedStatement.setFloat(i + 1, Float.parseFloat(insertupd[i]));\n";

                                                     prog+="} catch (NumberFormatException g) {\n";
                                                         prog+="Date d = new Date(insertupd[i]);\n";
                                                         prog+="preparedStatement.setDate(i + 1, (java.sql.Date) d);\n";
                                                     prog+="}\n";
                                                 prog+="}\n";
                                             prog+="}\n";
                                         prog+="}\n";

                                         prog+="preparedStatement.executeUpdate();\n";
                                         prog+="JOptionPane.showMessageDialog(null, \"Se ha actualizado correctamente en la tabla: "+ parser.hashTablas.get(i)+"\");\n";

                                     prog+="} catch (SQLException e) {\n";
                                         prog+="System.out.println(e.getMessage());\n";
                                     prog+="}\n";

                                    //}
                                     prog+="String query = \"SELECT * FROM "+ parser.hashTablas.get(i)+"\";\n";
                                     prog+="PreparedStatement st;\n";
                                     prog+="ResultSet rs;\n";

                                     prog+="try {\n";
                                         prog+="st = connection.prepareStatement(query);\n";
                                         prog+="rs = st.executeQuery();\n";

                                        prog += "String consulta2 = \"SELECT COUNT(*) As numeroCampos FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema = 'Automatas' AND table_name = '" + parser.hashTablas.get(i) + "'\";\n";
                                        prog += "PreparedStatement pstm = connection.prepareStatement( consulta2 );\n";
                                        prog += "ResultSet res = pstm.executeQuery();\n";
                                        prog += "res.next();\n";
                                        prog += "int columnas = res.getInt(\"numeroCampos\");\n";

                                        prog += "DefaultTableModel dtm = new DefaultTableModel();\n";
                                        prog += "Object datos[] = new Object[columnas];\n";


                                                        //agregar columnas
                                                 prog+="for (int i = 0; i < columnas; i++) {\n";
                                                     prog+="dtm.addColumn(i);\n";
                                                 prog+="}\n";
                                                prog+="while (rs.next()) {\n";
                                                    prog+="for (int i = 0; i < columnas; i++) {\n";
                                                        prog+="datos[i] = rs.getObject(i + 1);\n";
                                                    prog+="}\n";
                                                    prog+="dtm.addRow(datos);\n";
                                                prog+="}\n";

                                                prog+="tabla.setModel(dtm);\n";

                                            prog+="} catch (SQLException ex) {\n";
                                                prog+="ex.printStackTrace();\n";
                                            prog+="}\n";   
                                 prog+="}\n";
                             prog+="}); //fin del action performed del boton actualizar\n";

                            // --- Evento que al pulsar sobre la tabla rellene los campos de texto del formulario        
                             prog+="tabla.addMouseListener(new java.awt.event.MouseAdapter() {\n";
                                 prog+="public void mouseClicked(java.awt.event.MouseEvent evt) {\n";
                                     prog+="int filaSeleccionada = tabla.getSelectedRow();\n";
                                     prog+="String valorReferencia;\n";
                                     prog+="valorReferencia = (String) tabla.getValueAt(filaSeleccionada, 0);\n";
                                     prog+="TableModel modelo = tabla.getModel();\n";
                                     prog+="for (int i = 0; i <"+ parser.dataStructure.get(index).size()+"; i++) {\n";
                                         prog+="campo[i].setText(modelo.getValueAt(filaSeleccionada, i).toString());\n";
                                     prog+="}\n";
                                     prog+="referencia = campo[0].getText();\n";
                                 prog+="}\n";
                             prog+="});\n";

                             prog+="frameActualiza.setVisible(true);\n";
                            
                        
                            prog+="}\n";
                        prog+="}\n";    
                        
                        try{
                            String ruta = "C:\\Users\\OmarSebastian\\Documents\\7¬∞ Semestre\\Leng. Automatas II\\Archivos Java Generados\\Actualizacion"+parser.hashTablas.get(i)+".java";
                            File archivo = new File(ruta);
                            BufferedWriter bw;
                        if(archivo.exists()) {
                            bw = new BufferedWriter(new FileWriter(archivo));
                            bw.write("El fichero de texto ya estaba creado.");
                        } else {
                            bw = new BufferedWriter(new FileWriter(archivo));
                            bw.write(prog);
                        }
                        bw.close();
                        }catch(IOException e){
                            e.printStackTrace();
                        }
                  //System.out.println(""+prog+"\n\n\n\n\n\n\n\n");
                  prog="";
                  
                } //Fin del if == 2
            }//fin del for interno            
        }// fin del for externo
        
        JOptionPane.showMessageDialog(null, "Se han generado los archivos en el directorio Archivos Java Generedos");
    }//GEN-LAST:event_btnGenerarMouseClicked

 
         


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAbrir;
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnAyuda;
    private javax.swing.JButton btnConsultar;
    private javax.swing.JButton btnEjecutar;
    private javax.swing.JButton btnGenerar;
    private javax.swing.JToggleButton btnGuardar;
    private javax.swing.JButton btnInserta;
    private javax.swing.JButton jButton1;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JTextArea taAuxArch;
    private javax.swing.JTextArea taAuxiliarArchivos;
    private javax.swing.JTextArea taEntrada;
    private javax.swing.JTextArea taSalida;
    // End of variables declaration//GEN-END:variables
}
